// Code generated by MockGen. DO NOT EDIT.
// Source: slot/machine/services/row (interfaces: SymbolsService,CoefficientService)

// Package mock_row is a generated GoMock package.
package mock_row

import (
	reflect "reflect"
	models "slot/machine/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSymbolsService is a mock of SymbolsService interface.
type MockSymbolsService struct {
	ctrl     *gomock.Controller
	recorder *MockSymbolsServiceMockRecorder
}

// MockSymbolsServiceMockRecorder is the mock recorder for MockSymbolsService.
type MockSymbolsServiceMockRecorder struct {
	mock *MockSymbolsService
}

// NewMockSymbolsService creates a new mock instance.
func NewMockSymbolsService(ctrl *gomock.Controller) *MockSymbolsService {
	mock := &MockSymbolsService{ctrl: ctrl}
	mock.recorder = &MockSymbolsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSymbolsService) EXPECT() *MockSymbolsServiceMockRecorder {
	return m.recorder
}

// GetSymbols mocks base method.
func (m *MockSymbolsService) GetSymbols() []models.Symbol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbols")
	ret0, _ := ret[0].([]models.Symbol)
	return ret0
}

// GetSymbols indicates an expected call of GetSymbols.
func (mr *MockSymbolsServiceMockRecorder) GetSymbols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbols", reflect.TypeOf((*MockSymbolsService)(nil).GetSymbols))
}

// HasWon mocks base method.
func (m *MockSymbolsService) HasWon(arg0 []models.Symbol) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWon", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasWon indicates an expected call of HasWon.
func (mr *MockSymbolsServiceMockRecorder) HasWon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWon", reflect.TypeOf((*MockSymbolsService)(nil).HasWon), arg0)
}

// MockCoefficientService is a mock of CoefficientService interface.
type MockCoefficientService struct {
	ctrl     *gomock.Controller
	recorder *MockCoefficientServiceMockRecorder
}

// MockCoefficientServiceMockRecorder is the mock recorder for MockCoefficientService.
type MockCoefficientServiceMockRecorder struct {
	mock *MockCoefficientService
}

// NewMockCoefficientService creates a new mock instance.
func NewMockCoefficientService(ctrl *gomock.Controller) *MockCoefficientService {
	mock := &MockCoefficientService{ctrl: ctrl}
	mock.recorder = &MockCoefficientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoefficientService) EXPECT() *MockCoefficientServiceMockRecorder {
	return m.recorder
}

// Calcuate mocks base method.
func (m *MockCoefficientService) Calcuate(arg0 []float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calcuate", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Calcuate indicates an expected call of Calcuate.
func (mr *MockCoefficientServiceMockRecorder) Calcuate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calcuate", reflect.TypeOf((*MockCoefficientService)(nil).Calcuate), arg0)
}
