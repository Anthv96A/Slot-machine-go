// Code generated by MockGen. DO NOT EDIT.
// Source: slot/machine/services/game (interfaces: RowService,CoefficientService)

// Package mock_game is a generated GoMock package.
package mock_game

import (
	reflect "reflect"
	row "slot/machine/services/row"

	gomock "github.com/golang/mock/gomock"
)

// MockRowService is a mock of RowService interface.
type MockRowService struct {
	ctrl     *gomock.Controller
	recorder *MockRowServiceMockRecorder
}

// MockRowServiceMockRecorder is the mock recorder for MockRowService.
type MockRowServiceMockRecorder struct {
	mock *MockRowService
}

// NewMockRowService creates a new mock instance.
func NewMockRowService(ctrl *gomock.Controller) *MockRowService {
	mock := &MockRowService{ctrl: ctrl}
	mock.recorder = &MockRowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowService) EXPECT() *MockRowServiceMockRecorder {
	return m.recorder
}

// GetRow mocks base method.
func (m *MockRowService) GetRow() (*row.RowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRow")
	ret0, _ := ret[0].(*row.RowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRow indicates an expected call of GetRow.
func (mr *MockRowServiceMockRecorder) GetRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRow", reflect.TypeOf((*MockRowService)(nil).GetRow))
}

// MockCoefficientService is a mock of CoefficientService interface.
type MockCoefficientService struct {
	ctrl     *gomock.Controller
	recorder *MockCoefficientServiceMockRecorder
}

// MockCoefficientServiceMockRecorder is the mock recorder for MockCoefficientService.
type MockCoefficientServiceMockRecorder struct {
	mock *MockCoefficientService
}

// NewMockCoefficientService creates a new mock instance.
func NewMockCoefficientService(ctrl *gomock.Controller) *MockCoefficientService {
	mock := &MockCoefficientService{ctrl: ctrl}
	mock.recorder = &MockCoefficientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoefficientService) EXPECT() *MockCoefficientServiceMockRecorder {
	return m.recorder
}

// Calcuate mocks base method.
func (m *MockCoefficientService) Calcuate(arg0 []float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calcuate", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Calcuate indicates an expected call of Calcuate.
func (mr *MockCoefficientServiceMockRecorder) Calcuate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calcuate", reflect.TypeOf((*MockCoefficientService)(nil).Calcuate), arg0)
}
